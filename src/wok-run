#!/usr/bin/env python

###############################################################################
#
#    Copyright 2009-2011, Universitat Pompeu Fabra
#
#    This file is part of Wok.
#
#    Wok is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Wok is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses
#
###############################################################################

import os
import os.path
from datetime import datetime

from wok import logger
from wok.config import OptionsConfig
from wok.element import DataElement
from wok.core.engine import WokEngine

# Wok initialization

default_instance_name = datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
install_path = os.path.dirname(os.path.realpath(__file__))

def add_options(parser):
	parser.add_option("-n", "--instance-name", dest="instance_names",
				action="append", metavar="NAME",
				help="Set the instance name. Default name is built from the current date.")

initial_conf = {
	"wok" : {
		"execution" : {
			"mode" : {
				"native" : {
					"python" : {
						"lib_path" : [install_path]
					}
				}
			}
		}
	}
}

conf = OptionsConfig(
	initial_conf = initial_conf,
	args_usage = "[<flow-file>]",
	add_options = add_options)

if "wok" not in conf:
	print("Missing wok configuration")
	exit(-1)

wok_conf = conf["wok"]

# initialize logging

logger.initialize(wok_conf.get("log"))
log = logger.get_logger(wok_conf.get("log"), name = "wok-run")

# check arguments

flow_paths = None
if len(conf.args) > 0:
	flow_paths = conf.args
#elif len(conf.args) > 1:
#	log.error("More than one workflow definition file specified")
#	exit(-1)

conf.builder.add_value("__cwd", os.getcwd())

# expand variables

#conf.expand_vars()
#log.debug("Configuration: %s" % conf)

def main():
	server_mode = wok_conf.get("server.enabled", False, dtype=bool)
	server_host = wok_conf.get("server.host", "localhost", dtype=str)
	server_port = wok_conf.get("server.port", 5000, dtype=int)
	server_debug = wok_conf.get("server.debug", False, dtype=bool)
	start_instances = wok_conf.get("server.start_instances", False, dtype=bool)

	# create engine
	wok = WokEngine(conf)

	try:
		# create instances
		if flow_paths is not None:
			instance_names = conf.options.instance_names
			for i, flow_path in enumerate(flow_paths):
				if i < len(instance_names):
					instance_name = instance_names[i]
				else:
					if len(flow_paths) == 1:
						instance_name = default_instance_name
					else:
						instance_name = "%s-%02d" % (default_instance_name, i)

				wok.create_instance(instance_name, conf.builder, flow_path)
				if not server_mode or start_instances:
					# TODO start instance
					pass

		# start wok on the background
		wok.start(wait = False)

		# run server
		if server_mode:
			from wok.server.init import app

			log.info("Running server at http://{0}:{1}".format(server_host, server_port))

			log_conf = wok_conf.get("server.log")
			if log_conf is None:
				log_conf = DataElement()
				log_conf["level"] = "warn"
			app_log = logger.get_logger(conf = log_conf, name = "werkzeug")
			app_log.info("Log configured")

			app.config["WOK"] = wok
			app.run(
					host = server_host,
					port = server_port,
					debug = server_debug,
					use_reloader = False)

			# user has pressed ctrl-C and flask app stops
			# then we have to stop the engine too
			wok.stop()
		else:
			# wait for wok engine to finish
			wok.wait()
	except Exception as e:
		log.exception(e)
		wok.stop()
		raise

if __name__ == "__main__":
	main()
